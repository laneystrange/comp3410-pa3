Results for Part 1:
      Original
lw  $s2, 0($s1)
lw  $s1, 16($s6)
sub $s6, $s1, $s2
add $s6, $s2, $s2
or  $s3, $s6, $zero
sw  $s6, 12($s1)
addi $s4, $s4, 10
subi $s5, $s4, 4

        Final 1:
lw $s2, 0($s1)
lw $s1, 16($s6)
addi $s4, $s4, 10  #inserted from line 9 - solved hazard1
sub $s6, $s1, $s2 
add $s6, $s2, $s2	
or $s3, $s6, $zero
#sw $s6, 12($s1)  attempt to remove hazard - non resolved hazard2
#addi $s4, $s4, 10 moved to 3rd line - solved hazard1
subi $s5, $s4, 4 
sw $s6, 12($s1) #non resolved hazard2

So in the end, there was still a hazard present due to $s1 no longer 
having an address that can access memory. If one were to use a stack 
point or reinitialize s1 to the array address, then there would be no hazard here. 
The nature of the problem asked us to just move instructions, but to fix issue totally
with no hazards, one could do the following:
      Final 2:
lw $s2, 0($s1)
lw $s1, 16($s6)
addi $s4, $s4, 10  
sub $s6, $s1, $s2 
add $s6, $s2, $s2	
or $s3, $s6, $zero
subi $s5, $s4, 4 

addi $sp, $sp, -4 # can use this
la $s1, array #recommended to use this
sw $s6, 12($s1) #resolved hazard2 using $sp or $s1.

After moving addi $s4, $s4, 10, it canceled the hazard between the lw $s1, 16($s6) and the sub $s6,$s1,$s2 

Results for Part 2:

Enter the floating number
4.111
Enter the exponent
2
16.900322
-- program is finished running (dropped off bottom) --

Enter the floating number
-9.022
Enter the exponent
2
81.39649
-- program is finished running (dropped off bottom) --

Enter the floating number
1.111
Enter the exponent
-1
0.90009004
-- program is finished running (dropped off bottom) --

Enter the floating number
-2.222
Enter the exponent
-2
0.20254053
-- program is finished running (dropped off bottom) --

Results Part 3:

Enter a positive floating number that will have square root taken
35.000

6
-- program is finished running --

Enter a positive floating number that will have square root taken
66.345

8
-- program is finished running --

Enter a positive floating number that will have square root taken
-1

Number was not positive; please try again
9.0

3
-- program is finished running --

Enter a positive floating number that will have square root taken
10.10

3
-- program is finished running --


